# This is a basic workflow to help you get started with Actions

name: Build Unity Project and add to Release

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  #push:
  #  branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    
    #Version of the new release
    env:
      VERSION: 1.0.0
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      # Build
      - name: Unity - Builder
        uses: game-ci/unity-builder@v2.0-alpha-11
        env:
            UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        with:
            targetPlatform: StandaloneWindows64
            buildName: Game

      # Output to workflow action
      - uses: actions/upload-artifact@v2
        with:
          name: Build
          path: build
      
      # Zip build for Release
      - name: Zip project
        run: |
          dir build
          zip -r build.zip build/StandaloneWindows64
      
      # Create Release
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          release_name: Release ${{ env.VERSION }}
          draft: false
          prerelease: false
          
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./build.zip
          asset_name: build.zip
          asset_content_type: application/zip

